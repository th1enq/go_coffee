syntax="proto3";

package user;

option go_package = "github.com/th1enq/go_coffee/proto/gen";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service UserService {
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/register"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Register a new user"
            description: "This endpoint allows a new user to register."
            tags: "User"
        };
    }

    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/login"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Login an existing user"
            description: "This endpoint allows an existing user to login."
            tags: "User"
        };
    }

    rpc GetUserInfo(GetUserInfoRequest) returns (GetUserInfoResponse) {
        option (google.api.http) = {
            get: "/api/v1/user/info"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get user information"
            description: "This endpoint retrieves the information of the logged-in user."
            tags: "User"
        };
    }

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/api/v1/user/create"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Create a new user by admin"
            description: "This endpoint allows an admin to create a new user."
            tags: "User"
        };
    }
}

message UserInfo {
    int64 id = 1;
    string username = 2;
    string email = 3;
    string created_at = 4;
    string updated_at = 5;
}

message RegisterRequest {
    string username = 1;
    string password = 2;
    string email = 3;
}

message RegisterResponse {
    string user_id = 1;
    string token = 2;
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    string token = 1;
    UserInfo user = 2;
}

message GetUserInfoRequest {
}

message GetUserInfoResponse {
    UserInfo user = 1;
}

message CreateUserRequest {
    string username = 1;
    string password = 2;
    string email = 3;
}

message CreateUserResponse {
    string user_id = 1;
    string token = 2;
}